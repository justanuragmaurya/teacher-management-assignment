generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Teacher
  Admin
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  SCHEDULED
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  birthdate     DateTime?
  phone         Int?
  address       String?
  Qualifications Qualifications[]
  Availability  Availability[]
  accounts      Account[]
  sessions      Session[]
  role          Role @default(Teacher)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Qualifications{
  id String @id @default(cuid())
  title String
  date DateTime
  rate Int
  teacherid String
  teacher User @relation(fields: [teacherid] ,references: [id])
}

model Availability {
  id String @id @default(cuid())
  teacherId String
  teacher User @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  dayOfWeek DayOfWeek
  timeSlot String // Format: "09:00-10:00"
  status AvailabilityStatus @default(AVAILABLE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([teacherId, dayOfWeek, timeSlot])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}